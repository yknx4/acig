{"version":3,"sources":["assets/leaf-logo.png","utils/itemCodes.ts","utils/numeric.ts","utils/items.ts","utils/formatCheat.ts","ItemShow.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","parseVariation","variation","includes","padStart","split","v1","v2","parsedV2","parseInt","realId","item","parseFloat","toFixed","decimalToHex","d","padding","hex","Number","toString","length","toUpperCase","isArt","val","has","isVariableInsertable","isFloor","hasColor","isRecipe","outputTemplate","formatCheat","indexAsString","index","template","recipeCheat","itemCheat","thirdField","fourthField","firstLineData","Genuine","Variation","Style","ItemShow","props","small","onClick","iconHeight","Panel","bordered","bodyFill","className","src","Image","height","alt","Name","header","Tag","Avatar","Source","lastLineData","photos","pho","miscellaneous","misc","houseware","hw","wallmounted","wm","art","ar","accessories","acc","bags","ba","bottoms","bo","clothingOther","co","dressUp","du","floors","fl","headware","hew","music","mu","posters","po","rugs","ru","shoes","sh","socks","so","tops","top","umbrellas","um","tools","to","wallpapers","wp","recipes","rp","itemsPool","itemLabel","postfix","dataa","map","m","value","label","role","EmptyItem","emptyItem","slot","leafLogo","cellIndex","row","column","InventoryGrid","selectedItems","fillCell","Grid","fluid","Row","rowIndex","columnIndex","Col","xs","key","undefined","Main","useState","selectedItem","selectItem","selectItemInCell","console","log","nextEmptyIndex","range","find","i","fillIndex","Container","Header","Navbar","appearance","Body","Nav","Item","icon","Icon","Sidebar","SelectPicker","data","groupBy","style","width","onSelect","uid","Button","disabled","Object","values","Content","sm","md","lg","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a71e612e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/leaf-logo.64bdcedb.png\";","import { Insertable } from '../definitions/acnh'\n\nexport function parseVariation(variation: string = 'NA') {\n  if (variation === 'NA' || !variation.includes('_')) {\n    return ''.padStart(8, '0')\n  }\n  if (variation.includes('_')) {\n    const [v1, v2] = variation.split('_')\n    const parsedV2 = parseInt(v2, 10)\n    return `${parsedV2 * 2}${v1}`.padStart(8, '0')\n  }\n  return \"XXXXXXXX\"\n}\n\n\nexport const realId = (item: Insertable) => parseInt(parseFloat(item[\"Internal ID\"]).toFixed(0))\n","export function decimalToHex(d: number, padding: number = 8) {\n  var hex = Number(d).toString(16);\n\n  while (hex.length < padding) {\n    hex = \"0\" + hex;\n  }\n\n  return hex.toUpperCase();\n}","import { has } from \"lodash\";\nimport { Insertable, Art, VariableInsertable, Garment, Floor, HasColor, Recipe } from \"../definitions/acnh\";\n\nexport function isArt(val: Insertable | Art): val is Art {\n  return has(val, 'Genuine')\n}\n\nexport function isVariableInsertable(val: Insertable | VariableInsertable): val is VariableInsertable {\n  return has(val, 'Variant ID')\n}\n\nexport function isGarment(val: Insertable | Garment): val is Garment {\n  return has(val, 'Style')\n}\n\nexport function isFloor(val: Insertable | Floor): val is Floor {\n  return has(val, 'HHA Concept 1')\n}\n\nexport function hasColor(val: any): val is HasColor {\n  return has(val, 'Color 1') && has(val, 'Color 2')\n}\n\nexport function isRecipe(val: Insertable): val is Recipe {\n  return has(val, 'Crafted Item Internal ID')\n}","import { parseVariation, realId } from './itemCodes';\nimport { decimalToHex } from './numeric';\nimport { Insertable, Recipe, VariableInsertable } from '../definitions/acnh';\nimport ot from '../data/output_template.json'\nimport { isRecipe, isVariableInsertable } from './items';\n\nconst outputTemplate = ot as string[][]\n\nfunction recipeCheat(item: Recipe): string[] {\n  return [decimalToHex(realId(item)), '000016A2']\n}\n\nfunction itemCheat(item: Insertable | VariableInsertable): string[] {\n  return [isVariableInsertable(item) ? parseVariation(item[\"Variant ID\"]) : '00000000', decimalToHex(realId(item))]\n}\n\nexport function formatCheat(item: Insertable | VariableInsertable, indexAsString: string) {\n  const index = parseInt(indexAsString, 10);\n  const template = outputTemplate[index];\n  const [thirdField, fourthField] =  isRecipe(item) ? recipeCheat(item) : itemCheat(item)\n  return `${template[0]} ${template[1]} ${thirdField} ${fourthField}\\n`;\n}\n","import React from 'react';\nimport { Avatar, Panel } from 'rsuite';\nimport { Art, Floor, Insertable, VariableInsertable } from './definitions/acnh';\nimport { parseVariation, realId } from './utils/itemCodes';\nimport { hasColor, isArt, isFloor, isGarment, isRecipe, isVariableInsertable } from './utils/items';\nimport { decimalToHex } from './utils/numeric';\n\ninterface ItemShowProps {\n  item: Insertable\n  small?: boolean\n  onClick?: () => any\n}\n\nfunction firstLineData(item: Insertable | Art | VariableInsertable) {\n  if (isArt(item)) {\n    return `Genuine: ${item.Genuine}`\n  }\n  if (isVariableInsertable(item)) {\n    return `Variation: ${item.Variation}`\n  }\n  if (isGarment(item)) {\n    return `Style: ${item.Style}`\n  }\n  if (isFloor(item)) {\n    return `Concept #1: ${item[\"HHA Concept 1\"]}`\n  }\n  return `Version Unlocked: ${item[\"Version Unlocked\"]}`\n}\n\nfunction lastLineData(item: Insertable | Art | VariableInsertable | Floor) {\n  if (isArt(item)) {\n    return `Tag: ${item.Tag}`\n  }\n  if (isVariableInsertable(item)) {\n    return `Variation: 0x${parseVariation(item[\"Variant ID\"])}`\n  }\n  if (isFloor(item)) {\n    return `Concept #2: ${item[\"HHA Concept 2\"]}`\n  }\n  if (isRecipe(item)) {\n    return <Avatar src=\"https://acnhcdn.com/latest/MenuIcon/BookRecipe.png\" alt=\"R\" />\n  }\n  return `Source: ${item.Source}`\n}\n\nexport function ItemShow(props: ItemShowProps) {\n  const { item, small = false, onClick = () => { } } = props;\n  const iconHeight = small ? 90 : 240;\n  return (\n    <Panel bordered bodyFill onClick={onClick} className=\"acitem\">\n      <img src={item.Image} height={iconHeight} alt={`${item.Name}`} />\n      <Panel header={item.Name}>\n        <p>\n          <small>{firstLineData(props.item)} <br />{hasColor(item) && <>Color 1: {item[\"Color 1\"]} <br />Color 2: {item[\"Color 2\"]} <br /></>}{lastLineData(item)}</small>\n        </p>\n      </Panel>\n    </Panel>\n  );\n}\n","import React, { useState } from 'react';\nimport 'rsuite/dist/styles/rsuite-default.css'\nimport './App.css'\nimport { Col, Content, Footer, Grid, Header, Row, SelectPicker, SelectPickerProps, Container, Icon, Nav, Navbar, Sidebar, Button } from 'rsuite'\nimport misc from './data/csv_img/miscellaneous.csv.json'\nimport hw from './data/csv_img/housewares.csv.json'\nimport wm from './data/csv_img/wall-mounted.csv.json'\nimport ar from './data/csv_img/art.csv.json'\nimport acc from './data/csv_img/accessories.csv.json'\nimport ba from './data/csv_img/bags.csv.json'\nimport bo from './data/csv_img/bottoms.csv.json'\nimport co from './data/csv_img/clothing other.csv.json'\nimport du from './data/csv_img/dress-up.csv.json'\nimport fl from './data/csv_img/floors.csv.json'\nimport hew from './data/csv_img/headwear.csv.json'\nimport mu from './data/csv_img/music.csv.json'\nimport pho from './data/csv_img/photos.csv.json'\nimport po from './data/csv_img/posters.csv.json'\nimport ru from './data/csv_img/rugs.csv.json'\nimport sh from './data/csv_img/shoes.csv.json'\nimport so from './data/csv_img/socks.csv.json'\nimport to from './data/csv_img/tools.csv.json'\nimport top from './data/csv_img/tops.csv.json'\nimport um from './data/csv_img/umbrellas.csv.json'\nimport wp from './data/csv_img/wallpaper.csv.json'\nimport rp from './data/csv_img/recipes.csv.json'\nimport { map } from 'lodash';\nimport leafLogo from './assets/leaf-logo.png'\nimport { formatCheat } from './utils/formatCheat';\nimport { ItemShow } from './ItemShow';\nimport { Art, Floor, Garment, Insertable, Recipe, VariableInsertable } from './definitions/acnh';\nimport { hasColor, isArt, isVariableInsertable, isRecipe } from './utils/items';\nimport { range } from 'lodash'\n\nconst photos: Array<VariableInsertable> = pho\nconst miscellaneous: Array<VariableInsertable> = misc\nconst houseware: Array<VariableInsertable> = hw\nconst wallmounted: Array<VariableInsertable> = wm\nconst art: Array<Art> = ar as Array<Art>\nconst accessories: Array<Garment> = acc\nconst bags: Array<Garment> = ba\nconst bottoms: Array<Garment> = bo\nconst clothingOther: Array<Garment> = co\nconst dressUp: Array<Garment> = du\nconst floors: Array<Floor> = fl\nconst headware: Array<Garment> = hew\nconst music: Array<Insertable> = mu\nconst posters: Array<Insertable> = po\nconst rugs: Array<Floor> = ru\nconst shoes: Array<Garment> = sh\nconst socks: Array<Garment> = so\nconst tops: Array<Garment> = top\nconst umbrellas: Array<Insertable> = um\nconst tools: Array<VariableInsertable> = to\nconst wallpapers: Array<Insertable> = wp\nconst recipes: Array<Recipe> = rp\n\nconst itemsPool: Insertable[] = [...shoes, ...socks, ...tops, ...umbrellas, ...tools, ...wallpapers, ...miscellaneous, ...houseware, ...wallmounted, ...art, ...accessories, ...bags, ...bottoms, ...clothingOther, ...dressUp, ...floors, ...headware, ...music, ...photos, ...posters, ...rugs, ...recipes]\n\nfunction itemLabel(item: Insertable | Art | VariableInsertable) {\n  const postfix = hasColor(item) ? ` - ${item[\"Color 1\"]} ${item[\"Color 2\"]}` : ''\n  if (isArt(item)) {\n    return `${item.Genuine === 'Yes' ? 'Genuine' : 'Fake'} ${item.Name}${postfix}`\n  }\n  if (isVariableInsertable(item)) {\n    return `${item.Variation} ${item.Name}${postfix}`\n  }\n  if (isRecipe(item)) {\n    return `${item.Name} - Recipe`\n  }\n  return item.Name + postfix\n}\n\nconst dataa: SelectPickerProps['data'] = itemsPool.map(m => ({\n  value: m['Unique Entry ID'],\n  label: itemLabel(m),\n  role: m.Name\n}))\n\n\ninterface EmptyItemProps {\n  slot: number\n  onClick?: () => any\n}\n\nfunction EmptyItem(props: EmptyItemProps) {\n  const { onClick = () => { } } = props\n  const emptyItem: Insertable = {\n    Name: `Empty Slot #${props.slot + 1}`,\n    Image: leafLogo,\n    \"Internal ID\": '',\n    \"Unique Entry ID\": '',\n    Source: '',\n    \"Version Unlocked\": \"0.0.0\"\n  }\n  return <ItemShow small={true} onClick={onClick} item={emptyItem} />\n}\n\nconst cellIndex = (row: number, column: number) => (row * 10) + column\n\ninterface InventoryGrid {\n  selectedItems: Record<number, Insertable>\n  fillCell: (row: number, col: number) => void\n}\n\nfunction InventoryGrid(props: InventoryGrid) {\n  const { selectedItems, fillCell } = props\n  return (\n    <Grid fluid>\n      <Row>\n        {[0, 1, 2, 3].map(rowIndex => (<>\n          {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(columnIndex => (\n            <Col xs={6} key={`column-${rowIndex}-${columnIndex}`}>\n              { selectedItems[cellIndex(rowIndex, columnIndex)] === undefined ? <EmptyItem onClick={() => fillCell(rowIndex, columnIndex)} slot={cellIndex(rowIndex, columnIndex)} /> : <ItemShow onClick={() => fillCell(rowIndex, columnIndex)} small={true} item={selectedItems[cellIndex(rowIndex, columnIndex)]} />}\n            </Col>\n          ))}\n        </>)\n        )}\n      </Row>\n    </Grid>\n  )\n}\n\nfunction Main() {\n  const [selectedItem, selectItem] = useState(itemsPool[0])\n  const [selectedItems, selectItemInCell] = useState<Record<number, Insertable>>({})\n  console.log(selectedItem)\n  console.log(selectedItems)\n\n  const nextEmptyIndex = range(40).find(i => selectedItems[i] === undefined) ?? 0\n  const selectAcItem = (uid: string) => { selectItem(itemsPool.find(m => m[\"Unique Entry ID\"] === uid) ?? itemsPool[0]) }\n  const fillIndex = (index: number) => selectItemInCell({ ...selectedItems, [index]: selectedItem })\n  const fillCell = (row: number, column: number) => fillIndex(cellIndex(row, column))\n  const fillEmpty = () => fillIndex(nextEmptyIndex)\n  console.log(`Next empty is: ${nextEmptyIndex}`)\n  return (\n    <Container>\n      <Header>\n        <Navbar appearance=\"inverse\">\n          <Navbar.Header>\n            <img src={leafLogo} className=\"logo\" alt=\"Animal Crossing New Horizons Inventory Generator Logo\" />\n          </Navbar.Header>\n          <Navbar.Body>\n            <Nav>\n              <Nav.Item icon={<Icon icon=\"home\" />}>AC:NH Inventory Generator</Nav.Item>\n            </Nav>\n          </Navbar.Body>\n        </Navbar>\n      </Header>\n      <Container>\n        <Sidebar>\n          <SelectPicker data={dataa} groupBy=\"role\" style={{ width: '100%' }} onSelect={selectAcItem} />\n          <ItemShow item={selectedItem} />\n          <Button disabled={Object.values(selectedItems).length >= 40} onClick={fillEmpty}>Fill Next Empty</Button>\n        </Sidebar>\n        <Content>\n          <Grid fluid>\n            <Row className=\"show-grid\">\n              <Col xs={24} sm={12} md={16} lg={18}>\n                <InventoryGrid selectedItems={selectedItems} fillCell={fillCell} />\n              </Col>\n              <Col xs={24} sm={12} md={8} lg={6}>\n                <pre>\n                  {`[CHEAT CODE]\\n`}\n                  {map(selectedItems, formatCheat)}\n                </pre>\n              </Col>\n            </Row>\n          </Grid>\n        </Content>\n      </Container>\n\n      <Footer>No rights reserved. Do whatever the f*** do you want. Ale Ornelas 2020</Footer>\n    </Container>\n  )\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}