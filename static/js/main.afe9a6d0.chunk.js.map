{"version":3,"sources":["assets/leaf-logo.png","utils/itemCodes.ts","utils/numeric.ts","utils/items.ts","utils/formatCheat.ts","items/items.ts","ItemShow.tsx","ItemsSearch.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["parseVariation","variation","includes","padStart","split","v1","v2","parsedV2","parseInt","realId","item","internalId","decimalToHex","d","padding","hex","Number","toString","length","toUpperCase","isRecipe","input","has","Catalog","Category","CeilingType","CurtainType","ExchangeCurrency","Gender","HhaCategory","InteractEnum","KitType","LightingType","Museum","PaneType","PrimaryShape","Seasonallity","SecondaryShape","Size","SizeCategory","SpeakerType","Style","BodyTitle","Color","LabelTheme","Source","Theme","VariantID","VersionAdded","VfxType","WindowColor","WindowType","inventoryOffsets","generateTemplate","index","player","inventoryPosition","recipeCheat","itemCheat","variantId","ItemShow","props","variant","small","onClick","onDoubleClick","iconHeight","image","albumImage","storageImage","alt","className","src","height","name","category","map","materials","v","k","key","uniqueEntryId","undefined","genuine","colors","join","themes","items","untypedItems","recipes","untypedRecipes","processedItems","flatMap","variants","allItems","options","includeScore","keys","weight","myIndex","Fuse","createIndex","fuse","searcher","memoize","value","search","limit","ItemsSearch","onSelect","onSecondarySelect","useState","matchedOptions","setMatchedOptions","doSearch","useEffect","result","r","placeholder","onChange","e","target","defaultValue","addonAfter","SearchOutlined","o","EmptyItem","slot","sourceSheet","Other","leafLogo","filename","source","buy","sell","cellIndex","row","column","InventoryGrid","selectedItems","fillCell","rowIndex","columnIndex","Main","selectedItem","selectItem","selectItemInCell","nextEmptyIndex","range","find","i","fillIndex","fillEmpty","message","success","nextIndex","indexOf","selectNext","disabled","Object","values","indexAsString","template","thirdField","fourthField","formatCheat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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,E,gBAAAA,E,yBAAAA,E,YAAAA,E,cAAAA,E,oBAAAA,E,uBAAAA,E,uBAAAA,M,cAsDAC,K,YAAAA,E,cAAAA,E,cAAAA,E,YAAAA,E,cAAAA,E,oBAAAA,E,YAAAA,E,cAAAA,E,gBAAAA,E,YAAAA,E,gBAAAA,E,UAAAA,E,cAAAA,E,iBAAAA,M,cAiBAC,K,cAAAA,E,oBAAAA,E,uBAAAA,E,gBAAAA,E,YAAAA,E,sBAAAA,E,cAAAA,E,gBAAAA,E,wBAAAA,E,oBAAAA,E,aAAAA,M,cAcAC,K,2BAAAA,E,6BAAAA,E,uBAAAA,E,qCAAAA,E,cAAAA,E,oBAAAA,E,oBAAAA,E,oBAAAA,E,iBAAAA,E,qBAAAA,E,6DAAAA,E,UAAAA,E,uCAAAA,E,uBAAAA,E,yBAAAA,E,6CAAAA,E,gCAAAA,E,4BAAAA,E,2BAAAA,E,oBAAAA,E,cAAAA,E,qBAAAA,E,4DAAAA,E,mBAAAA,E,yDAAAA,E,iEAAAA,E,oDAAAA,E,qBAAAA,E,6BAAAA,E,4CAAAA,E,+DAAAA,E,yBAAAA,E,SAAAA,E,iCAAAA,E,kBAAAA,E,iCAAAA,E,cAAAA,E,oBAAAA,E,kCAAAA,E,wBAAAA,E,oBAAAA,E,6BAAAA,E,UAAAA,E,iCAAAA,E,8BAAAA,E,oBAAAA,E,YAAAA,E,gBAAAA,E,0DAAAA,E,yBAAAA,E,cAAAA,E,cAAAA,E,YAAAA,E,YAAAA,E,UAAAA,E,YAAAA,E,0BAAAA,E,6BAAAA,E,oBAAAA,E,4CAAAA,E,4BAAAA,E,6BAAAA,E,2DAAAA,E,4CAAAA,E,gDAAAA,E,8CAAAA,E,qBAAAA,E,yBAAAA,E,gBAAAA,E,uBAAAA,E,qBAAAA,E,iCAAAA,E,mCAAAA,E,+CAAAA,E,2CAAAA,E,iDAAAA,E,oCAAAA,E,sCAAAA,E,kCAAAA,E,gCAAAA,E,sCAAAA,E,oCAAAA,E,sCAAAA,E,yBAAAA,E,4BAAAA,E,cAAAA,E,cAAAA,E,kBAAAA,E,mBAAAA,E,+DAAAA,E,kBAAAA,E,+BAAAA,E,wCAAAA,E,mBAAAA,E,+CAAAA,E,sBAAAA,E,gBAAAA,E,mDAAAA,E,uCAAAA,M,cAsGAC,K,oBAAAA,E,0BAAAA,E,kBAAAA,E,UAAAA,E,sBAAAA,E,oBAAAA,E,cAAAA,E,kBAAAA,E,mBAAAA,E,6BAAAA,E,gBAAAA,E,gBAAAA,E,gBAAAA,E,kBAAAA,E,yBAAAA,E,cAAAA,E,YAAAA,E,cAAAA,E,gBAAAA,E,oBAAAA,E,cAAAA,E,gBAAAA,E,YAAAA,E,cAAAA,E,sBAAAA,M,cA4BAC,K,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,aAAAA,E,cAAAA,M,cAmEAC,K,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,eAAAA,E,gBAAAA,M,cAUAC,K,oBAAAA,E,gBAAAA,E,mBAAAA,M,cAMAC,K,yBAAAA,E,qBAAAA,E,uBAAAA,E,qBAAAA,E,uBAAAA,E,2BAAAA,E,yBAAAA,E,uBAAAA,E,aAAAA,M,cAYAC,K,YAAAA,E,gBAAAA,E,qBAAAA,E,yBAAAA,E,4BAAAA,M,sEEnjBNoC,GAAiBC,EACjBC,GAAqBC,EACrBC,GAAoCC,kBAAQL,IAAO,gBAAGM,EAAH,EAAGA,SAAanF,EAAhB,mCAA2BmF,EAASjB,KAAI,SAAAE,GAAC,kCAAUA,GAAV,IAAapE,OAAMgE,KAAMhE,EAAKgE,aACnHoB,GAAmB,sBAAOH,IAAP,YAA0BF,KAEpDM,GAAU,CACdC,cAAc,EACdC,KAAM,CACJ,CACEvB,KAAM,OACNwB,OAAQ,GAEV,CACExB,KAAM,qBACNwB,OAAQ,GAEV,CACExB,KAAM,kBACNwB,OAAQ,GAEV,CACExB,KAAM,mBACNwB,OAAQ,GAEV,CACExB,KAAM,MACNwB,OAAQ,GAEV,cACA,eACA,SACA,SACA,eACA,iBACA,OACA,WACA,gBAIEC,GAAUC,KAAKC,YAAYN,GAAQE,KAAMH,IACzCQ,GAAO,IAAIF,KAAKN,GAAUC,GAASI,IACnCI,GAAWC,mBAAQ,SAACC,GAAD,OAAmBH,GAAKI,OAAOD,EAAO,CAAEE,MAAO,QAMjE,SAASC,GAAY/C,GAA0B,IAC5CgD,EAA2ChD,EAA3CgD,SAD2C,EACAhD,EAAjCiD,yBADiC,MACb,aADa,IAEPC,mBAAoB,IAFb,mBAE5CC,EAF4C,KAE5BC,EAF4B,OAGxBF,mBAAiB,IAHO,mBAG5CL,EAH4C,KAGpCQ,EAHoC,KAInDC,qBAAU,WACR,IAAMC,EAASb,GAASG,GACxBO,EAAkBG,EAAOxC,KAAI,SAAAyC,GAAC,OAAIA,EAAE3G,WACnC,CAACgG,IAEJ,IAAMX,EAAkB,YAAOiB,GAE/B,OACE,yBAAKzC,UAAU,oBACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,QACb,kBAAC,KAAD,CAAO+C,YAAY,oBAAoBC,SAAU,SAACC,GAAD,OAAON,EAASM,EAAEC,OAAOhB,QAAQiB,aAAchB,EAAQiB,WAAY,kBAACC,GAAA,EAAD,SAErH7B,EAAQnB,KAAI,SAAAiD,GAAC,OAAI,yBAAK7C,IAAG,iBAAY6C,EAAE5C,eAAiBV,UAAU,QAAO,kBAACX,EAAD,CAAUE,QAAS+D,EAAG5D,cAAe,kBAAM6C,EAAkBe,IAAI7D,QAAS,kBAAM6C,EAASgB,Y,uBC1D3K,SAASC,GAAUjE,GAAwB,IAAD,EACRA,EAAxBG,eADgC,MACtB,aADsB,EAGlCF,EAAmB,CACvBY,KAAK,eAAD,OAAiBb,EAAMkE,KAAO,GAClCrH,KAAM,CACJgE,KAAK,eAAD,OAAiBb,EAAMkE,KAAO,GAClCC,YAAaxG,EAASyG,OAExB9D,MAAO+D,EACPC,SAAU,GACVlD,cAAe,GACfG,OAAQ,GACRE,OAAQ,GACR8C,OAAQ,GACRzH,WAAY,EACZ0H,IAAK,EACLC,KAAM,GAER,OAAO,kBAAC1E,EAAD,CAAUG,OAAO,EAAMC,QAASA,EAASF,QAASA,IAG3D,IAAMyE,GAAY,SAACC,EAAaC,GAAd,OAAuC,EAAND,EAAUC,GAO7D,SAASC,GAAc7E,GAA4B,IACzC8E,EAA4B9E,EAA5B8E,cAAeC,EAAa/E,EAAb+E,SACvB,OACE,oCACG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGhE,KAAI,SAACiE,GAAD,OAClC,yBAAKtE,UAAU,mBAAmBS,IAAG,cAAS6D,IAC3C,CAAC,EAAG,EAAG,EAAG,GAAGjE,KAAI,SAACkE,GAAD,OAChB,yBAAKvE,UAAU,iBAAiBS,IAAG,cAAS6D,EAAT,mBAA4BC,IAC7D,yBAAKvE,UAAU,sBACwCW,IAApDyD,EAAcJ,GAAUM,EAAUC,IACjC,kBAAChB,GAAD,CAAW9D,QAAS,kBAAM4E,EAASC,EAAUC,IAAcf,KAAMQ,GAAUM,EAAUC,KAEnF,kBAAClF,EAAD,CAAUI,QAAS,kBAAM4E,EAASC,EAAUC,IAAc/E,OAAO,EAAMD,QAAS6E,EAAcJ,GAAUM,EAAUC,gBAyFvHC,OA9Ef,WAAiB,IAAD,IACqBhC,mBAAkBjB,GAAS,IADhD,mBACPkD,EADO,KACOC,EADP,OAE4BlC,mBAAkC,IAF9D,mBAEP4B,EAFO,KAEQO,EAFR,KAIRC,EAAc,UAAGC,gBAAM,IAAIC,MAAK,SAACC,GAAD,YAA4BpE,IAArByD,EAAcW,aAAvC,QAA4D,EAC1EC,EAAY,SAACjG,GAAD,IAAgB5C,EAAhB,uDAAuBsI,EAAvB,OAAwCE,EAAiB,2BAAKP,GAAN,kBAAsBrF,EAAQ5C,MAElG8I,EAAY,WAA0B,IAAzB9I,EAAwB,uDAAjBsI,EACxBS,KAAQC,QAAR,gBAAyBhJ,EAAKgE,KAA9B,kBACA6E,EAAUJ,EAAgBzI,IAS5B,OACE,oCACE,6BAAS6D,UAAU,yBACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKC,IAAK0D,EAAU3D,UAAU,OAAOD,IAAI,0DACzC,wBAAIC,UAAU,SAAd,6BAGA,wBAAIA,UAAU,YAAd,aAON,6BAASA,UAAU,WACjB,yBAAKA,UAAU,WACb,2BAAOA,UAAU,8BACf,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,UACb,kBAAC,KAAD,CAAQP,QAAS,kBA7Bd,WACjB,IACM2F,EADe7D,GAAS8D,QAAQZ,GACL,EAC7BW,EAAY7D,GAAS5E,QACvB+H,EAAWnD,GAAS6D,IAyBeE,KAAvB,gBAIF,yBAAKtF,UAAU,UACb,kBAAC,KAAD,CAAQuF,SAAUC,OAAOC,OAAOrB,GAAezH,QAAU,GAAI8C,QAAS,kBAAMwF,MAA5E,qBAKJ,kBAAC5F,EAAD,CAAUE,QAASkF,IACnB,kBAACpC,GAAD,CAAaE,kBAAmB0C,EAAW3C,SAAU,SAACnG,GAAWuI,EAAWvI,QAGhF,yBAAK6D,UAAU,4BACb,kBAACmE,GAAD,CAAeC,cAAeA,EAAeC,SAjDtC,SAACJ,EAAaC,GAAd,IAA8B/H,EAA9B,uDAAqCsI,EAArC,OAAsDO,EAAUhB,GAAUC,EAAKC,GAAS/H,SAuDrG,6BAAS6D,UAAU,WACjB,8CAEGK,cAAI+D,GAAe,SAAC5D,EAAGD,GAAJ,OJnGvB,SAAqBpE,EAAyBuJ,GAAqD,IAA9B1G,EAA6B,uDAAZ,WAErF2G,EAAW7G,EADH7C,SAASyJ,EAAe,IACG1G,GAF8D,EAGpEnC,EAASV,GAAQ+C,EAAY/C,GAAQgD,EAAUhD,GAHqB,mBAGhGyJ,EAHgG,KAGpFC,EAHoF,KAIvG,MAAM,GAAN,OAAUF,EAAS,GAAnB,YAAyBA,EAAS,GAAlC,YAAwCC,EAAxC,YAAsDC,EAAtD,MI+FsCC,CAAYtF,EAAGD,QAKjD,4BAAQP,UAAU,UAChB,yBAAKA,UAAU,6BAA4B,6GCjI/B+F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM9B,a","file":"static/js/main.afe9a6d0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/leaf-logo.a8cf6480.png\";","import { Variant } from '../items/items'\nimport { Recipes } from '../items/recipes'\nexport function parseVariation(variation: string = 'NA') {\n  if (variation === 'NA' || !variation.includes('_')) {\n    return ''.padStart(8, '0')\n  }\n  if (variation.includes('_')) {\n    const [v1, v2] = variation.split('_')\n    const parsedV2 = parseInt(v2, 10)\n    return `${parsedV2 * 2}${v1}`.padStart(8, '0')\n  }\n  return \"XXXXXXXX\"\n}\n\n\nexport const realId = (item: Variant | Recipes) => item.internalId\n","export function decimalToHex(d: number, padding: number = 8) {\n  var hex = Number(d).toString(16);\n\n  while (hex.length < padding) {\n    hex = \"0\" + hex;\n  }\n\n  return hex.toUpperCase();\n}","import { has } from \"lodash\";\nimport { InvertedVariant } from \"./definitions\";\nimport { Recipes } from \"../items/recipes\";\n\nexport function isRecipe(input: any): input is Recipes {\n  return has(input, 'craftedItemInternalId')\n}\n\nexport function isVariant(input: any): input is InvertedVariant {\n  return has(input, 'uniqueEntryId') && !has(input, 'craftedItemInternalId')\n}","import { parseVariation, realId } from './itemCodes';\nimport { decimalToHex } from './numeric';\nimport ot from '../data/output_template.json'\nimport { isRecipe } from './items';\nimport { Variant } from '../items/items';\nimport { Recipes } from '../items/recipes';\n\ntype Player = keyof typeof ot\n\nconst inventoryOffsets: Record<Player, number> = {\n  \"Player 1\": 0xAD3C7FD8,\n  \"Player 2\": 0xAD4FBB50,\n  \"Player 3\": 0xAD62F6C8,\n  \"Player 4\": 0xAD763240,\n  \"Player 5\": 0xAD763240, //WRONG\n  \"Player 6\": 0xAD763240, //WRONG\n  \"Player 7\": 0xAD763240, //WRONG\n  \"Player 8\": 0xAD763240, //WRONG\n}\n\nconst slotSize = 0x8\n\nfunction generateTemplate(index: number, player: Player = \"Player 1\"): [string, string, string, string] {\n  const inventoryPosition = inventoryOffsets[player] + (index * slotSize)\n  return [\"08100000\", inventoryPosition.toString(16).toUpperCase(), \"00000000\", \"0000FFFE\"]\n}\n\n\nfunction recipeCheat(item: Recipes): string[] {\n  return [decimalToHex(realId(item)), '000016A2']\n}\n\nfunction itemCheat(item: Variant): string[] {\n  return [item.variantId != null ? parseVariation(item.variantId) : '00000000', decimalToHex(realId(item))]\n}\n\nexport function formatCheat(item: Variant | Recipes, indexAsString: string, player: Player = \"Player 1\") {\n  const index = parseInt(indexAsString, 10);\n  const template = generateTemplate(index, player)\n  const [thirdField, fourthField] =  isRecipe(item) ? recipeCheat(item) : itemCheat(item)\n  return `${template[0]} ${template[1]} ${thirdField} ${fourthField}\\n`;\n}\n","export interface Items {\n  sourceSheet: Category;\n  name: string;\n  patternTitle?: null | string;\n  diy?: boolean;\n  patternCustomize?: boolean;\n  kitType?: KitType | null;\n  size?: Size;\n  surface?: boolean;\n  exchangePrice?: number | null;\n  exchangeCurrency?: ExchangeCurrency | null;\n  sourceNotes?: null | string;\n  hhaBasePoints?: number | null;\n  hhaCategory?: HhaCategory | null;\n  interact?: boolean | InteractEnum;\n  tag?: null | string;\n  outdoor?: boolean;\n  speakerType?: SpeakerType | null;\n  lightingType?: LightingType | null;\n  catalog?: Catalog;\n  versionAdded?: VersionAdded;\n  unlocked?: boolean;\n  unlockNotes?: null | string;\n  set?: null | string;\n  series?: null | string;\n  customizationKitCost?: number | null;\n  variants: Variant[];\n  doorDeco?: boolean;\n  vfx?: boolean;\n  vfxType?: VfxType | null;\n  windowType?: WindowType | null;\n  windowColor?: WindowColor | null;\n  paneType?: PaneType | null;\n  curtainType?: CurtainType | null;\n  curtainColor?: null | string;\n  ceilingType?: CeilingType;\n  sizeCategory?: SizeCategory;\n  stackSize?: number | null;\n  customize?: boolean | null;\n  uses?: number;\n  seasonalAvailability?: Seasonallity;\n  seasonality?: Seasonallity;\n  gender?: Gender;\n  villagerGender?: Gender | null;\n  mannequinPiece?: boolean | null;\n  style1?: Style;\n  style2?: Style;\n  sortOrder?: number;\n  villagerEquippable?: boolean;\n  clothGroupId?: number;\n  primaryShape?: PrimaryShape;\n  secondaryShape?: SecondaryShape | null;\n  type?: string;\n  fossilGroup?: string;\n  description?: string;\n  museum?: Museum;\n  inventoryFilename?: null | string;\n  storageFilename?: null | string;\n  category?: Category;\n  realArtworkTitle?: string;\n  artist?: string;\n}\n\nexport enum Catalog {\n  ForSale = 'For sale',\n  NotForSale = 'Not for sale',\n  NotInCatalog = 'Not in catalog',\n}\n\nexport enum Category {\n  Accessories = 'Accessories',\n  Art = 'Art',\n  Bags = 'Bags',\n  Bottoms = 'Bottoms',\n  ClothingOther = 'Clothing Other',\n  DressUp = 'Dress-Up',\n  Fencing = 'Fencing',\n  Floors = 'Floors',\n  Fossils = 'Fossils',\n  Headwear = 'Headwear',\n  Housewares = 'Housewares',\n  Miscellaneous = 'Miscellaneous',\n  Music = 'Music',\n  Other = 'Other',\n  Photos = 'Photos',\n  Posters = 'Posters',\n  Rugs = 'Rugs',\n  Shoes = 'Shoes',\n  Socks = 'Socks',\n  Tools = 'Tools',\n  Tops = 'Tops',\n  Umbrellas = 'Umbrellas',\n  WallMounted = 'Wall-mounted',\n  Wallpaper = 'Wallpaper',\n}\n\nexport enum CeilingType {\n  Cloth = 'Cloth',\n  Gold = 'Gold',\n  Plain = 'Plain',\n  Stone = 'Stone',\n  Tile = 'Tile',\n  Wood = 'Wood',\n}\n\nexport enum CurtainType {\n  Curtains = 'Curtains',\n  RollerShades = 'Roller Shades',\n  SlattedBlinds = 'Slatted Blinds',\n}\n\nexport enum ExchangeCurrency {\n  HeartCrystals = 'Heart Crystals',\n  NookMiles = 'Nook Miles',\n}\n\nexport enum Gender {\n  Free = 'Free',\n  Manly = 'Manly',\n  Womanly = 'Womanly',\n}\n\nexport enum HhaCategory {\n  AC = 'AC',\n  Appliance = 'Appliance',\n  Audio = 'Audio',\n  Clock = 'Clock',\n  Doll = 'Doll',\n  Dresser = 'Dresser',\n  Lighting = 'Lighting',\n  MusicalInstrument = 'MusicalInstrument',\n  Pet = 'Pet',\n  Plant = 'Plant',\n  SmallGoods = 'SmallGoods',\n  Trash = 'Trash',\n  Tv = 'TV',\n}\n\nexport enum InteractEnum {\n  Chair = 'Chair',\n  Trash = 'Trash',\n  Wardrobe = 'Wardrobe',\n  Workbench = 'Workbench',\n}\n\nexport enum KitType {\n  Normal = 'Normal',\n  Pumpkin = 'Pumpkin',\n}\n\nexport enum LightingType {\n  Candle = 'Candle',\n  Emission = 'Emission',\n  Fluorescent = 'Fluorescent',\n  Monitor = 'Monitor',\n  Spotlight = 'Spotlight',\n}\n\nexport enum Museum {\n  Room1 = 'Room 1',\n  Room2 = 'Room 2',\n  Room3 = 'Room 3',\n}\n\nexport enum PaneType {\n  Glass = 'Glass',\n  Screen = 'Screen',\n}\n\nexport enum PrimaryShape {\n  ALine = 'A-line',\n  ALong = 'A-long',\n  BLong = 'B-long',\n  Balloon = 'Balloon',\n  Box = 'Box',\n  Dress = 'Dress',\n  Kimono = 'Kimono',\n  Marinesuit = 'Marinesuit',\n  Overall = 'Overall',\n  Rib = 'Rib',\n  Robe = 'Robe',\n  Salopette = 'Salopette',\n}\n\nexport enum Seasonallity {\n  AllYear = 'All Year',\n  Autumn = 'Autumn',\n  Fall = 'Fall',\n  Spring = 'Spring',\n  Summer = 'Summer',\n  Winter = 'Winter',\n}\n\nexport enum SecondaryShape {\n  H = 'H',\n  L = 'L',\n  N = 'N',\n}\n\nexport enum Size {\n  The05X1 = '0.5x1',\n  The15X15 = '1.5x1.5',\n  The1X05 = '1x0.5',\n  The1X1 = '1x1',\n  The1X15 = '1x1.5',\n  The1X2 = '1x2',\n  The2X05 = '2x0.5',\n  The2X1 = '2x1',\n  The2X15 = '2x1.5',\n  The2X2 = '2x2',\n  The3X1 = '3x1',\n  The3X2 = '3x2',\n  The3X3 = '3x3',\n  The4X3 = '4x3',\n  The4X4 = '4x4',\n  The5X5 = '5x5',\n}\n\nexport enum SizeCategory {\n  Large = 'Large',\n  Medium = 'Medium',\n  Small = 'Small',\n}\n\nexport enum SpeakerType {\n  Cheap = 'Cheap',\n  HiFi = 'Hi-fi',\n  Phono = 'Phono',\n  Retro = 'Retro',\n}\n\nexport enum Style {\n  Active = 'Active',\n  Cool = 'Cool',\n  Cute = 'Cute',\n  Elegant = 'Elegant',\n  Gorgeous = 'Gorgeous',\n  Simple = 'Simple',\n}\n\nexport interface Variant {\n  image?: string;\n  variation?: number | null | string;\n  filename: string;\n  variantId?: VariantID | null;\n  uniqueEntryId: string;\n  colors: Color[];\n  pattern?: null | string;\n  bodyCustomize?: boolean | null;\n  bodyTitle?: BodyTitle | null;\n  source: Source[];\n  internalId: number;\n  buy: number | null;\n  sell: number | null;\n  themes: Theme[];\n  closetImage?: string;\n  storageImage?: null | string;\n  labelThemes?: LabelTheme[];\n  framedImage?: null | string;\n  albumImage?: null | string;\n  inventoryImage?: null | string;\n  genuine?: boolean;\n  highResTexture?: null;\n}\n\nexport enum BodyTitle {\n  Art = 'Art',\n  BagColor = 'Bag color',\n  Bamboo = 'Bamboo',\n  BarrelColor = 'Barrel color',\n  BlockColor = 'Block color',\n  Body = 'Body',\n  BodyColor = 'Body color',\n  BrickColor = 'Brick color',\n  Can = 'Can',\n  Cardboard = 'Cardboard',\n  ChairBackAndSeat = 'Chair back and seat',\n  Coating = 'Coating',\n  Color = 'Color',\n  CoverDesign = 'Cover design',\n  CoverPattern = 'Cover pattern',\n  Creation = 'Creation',\n  Decorations = 'Decorations',\n  Design = 'Design',\n  Dish = 'Dish',\n  Easel = 'Easel',\n  Fabric = 'Fabric',\n  Finish = 'Finish',\n  Flavor = 'Flavor',\n  FlowerColor = 'Flower color',\n  Food = 'Food',\n  Frame = 'Frame',\n  FruitType = 'Fruit type',\n  Genre = 'Genre',\n  HayCondition = 'Hay condition',\n  Illumination = 'Illumination',\n  KnitCapColor = 'Knit-cap color',\n  LightColor = 'Light color',\n  LumberType = 'Lumber type',\n  MapCenter = 'Map center',\n  MushroomType = 'Mushroom type',\n  Name = 'Name',\n  Navigation = 'Navigation',\n  NutColor = 'Nut color',\n  Paint = 'Paint',\n  PaintColor = 'Paint color',\n  PlateColor = 'Plate color',\n  PumpkinColor = 'Pumpkin color',\n  RaceCarColors = 'Race-car colors',\n  RoofColor = 'Roof color',\n  Season = 'Season',\n  ShellColor = 'Shell color',\n  Sign = 'Sign',\n  Stone = 'Stone',\n  Tabletop = 'Tabletop',\n  TireColor = 'Tire color',\n  Variation = 'Variation',\n}\n\nexport enum Color {\n  Aqua = 'Aqua',\n  Beige = 'Beige',\n  Black = 'Black',\n  Blue = 'Blue',\n  Brown = 'Brown',\n  Colorful = 'Colorful',\n  Gray = 'Gray',\n  Green = 'Green',\n  Orange = 'Orange',\n  Pink = 'Pink',\n  Purple = 'Purple',\n  Red = 'Red',\n  White = 'White',\n  Yellow = 'Yellow',\n}\n\nexport enum LabelTheme {\n  Comfy = 'comfy',\n  Everyday = 'everyday',\n  FairyTale = 'fairy tale',\n  Formal = 'formal',\n  Goth = 'goth',\n  Outdoorsy = 'outdoorsy',\n  Party = 'party',\n  Sporty = 'sporty',\n  Theatrical = 'theatrical',\n  Vacation = 'vacation',\n  Work = 'work',\n}\n\nexport enum Source {\n  AbleSisters = 'Able Sisters',\n  AllVillagers = 'All villagers',\n  AppleTree = 'Apple Tree',\n  AssessingFossils = 'Assessing fossils',\n  Beach = 'Beach',\n  Birthday = 'Birthday',\n  Blathers = 'Blathers',\n  Breeding = 'Breeding',\n  BugOff = 'Bug-Off',\n  BunnyDay = 'Bunny Day',\n  BuryingBellsInAGlowingSpot = 'Burying bells in a glowing spot',\n  CJ = 'C.J.',\n  CatchingWithANet = 'Catching with a net',\n  CedarTree = 'Cedar Tree',\n  CherryTree = 'Cherry Tree',\n  ChoppingABambooTree = 'Chopping a bamboo tree',\n  ChoppingATree = 'Chopping a tree',\n  ClamDigSpot = 'Clam dig spot',\n  CoconutTree = 'Coconut Tree',\n  Crafting = 'Crafting',\n  Cyrus = 'Cyrus',\n  DaisyMae = 'Daisy Mae',\n  DeliveringItemForAVillager = 'Delivering item for a villager',\n  DigSpot = 'Dig Spot',\n  DiggingUpAFullyGrownBush = 'Digging up a fully grown bush',\n  DiggingUpAPartiallyGrownBush = 'Digging up a partially grown bush',\n  DiggingUpAPumpkinPlant = 'Digging up a pumpkin plant',\n  DiveSpot = 'Dive spot',\n  DodoAirlines = 'Dodo Airlines',\n  DonTReturnLostItem = \"Don't return lost item\",\n  DonTReturnTreasureQuestItem = \"Don't return treasure quest item\",\n  EggBalloon = 'Egg balloon',\n  Empty = '',\n  ExpiredTurnips = 'Expired turnips',\n  Fishing = 'Fishing',\n  FishingTourney = 'Fishing Tourney',\n  Flick = 'Flick',\n  Franklin = 'Franklin',\n  GlowingDigSpot = 'Glowing dig spot',\n  Gullivarrr = 'Gullivarrr',\n  Gulliver = 'Gulliver',\n  HardwoodTree = 'Hardwood Tree',\n  Hha = 'HHA',\n  HighFriendship = 'High Friendship',\n  HittingARock = 'Hitting a rock',\n  Isabelle = 'Isabelle',\n  Jack = 'Jack',\n  Jingle = 'Jingle',\n  JollyReddSTreasureTrawler = \"Jolly Redd's Treasure Trawler\",\n  KKConcert = 'K.K. concert',\n  Kicks = 'Kicks',\n  Label = 'Label',\n  Leif = 'Leif',\n  Luna = 'Luna',\n  MOM = 'Mom',\n  Mail = 'Mail',\n  MayDayTour = 'May Day Tour',\n  NewYearSEve = \"New Year's Eve\",\n  Nintendo = 'Nintendo',\n  NookMilesRedemption = 'Nook Miles Redemption',\n  NookSCranny = \"Nook's Cranny\",\n  NookShopping = 'Nook Shopping',\n  NookShoppingDailySelection = 'Nook Shopping Daily Selection',\n  NookShoppingPosters = 'Nook Shopping Posters',\n  NookShoppingPromotion = 'Nook Shopping Promotion',\n  NookShoppingSeasonal = 'Nook Shopping Seasonal',\n  OnGround = 'On ground',\n  OrangeTree = 'Orange Tree',\n  Pascal = 'Pascal',\n  PeachTree = 'Peach Tree',\n  PearTree = 'Pear Tree',\n  PickingFlowers = 'Picking flowers',\n  PickingPumpkins = 'Picking pumpkins',\n  PlantingABambooShoot = 'Planting a bamboo shoot',\n  PlantingABushStart = 'Planting a bush start',\n  PlantingACedarSapling = 'Planting a cedar sapling',\n  PlantingACherry = 'Planting a cherry',\n  PlantingACoconut = 'Planting a coconut',\n  PlantingAPeach = 'Planting a peach',\n  PlantingAPear = 'Planting a pear',\n  PlantingASapling = 'Planting a sapling',\n  PlantingAnApple = 'Planting an apple',\n  PlantingAnOrange = 'Planting an orange',\n  RecycleBox = 'Recycle box',\n  ReddSRaffle = \"Redd's Raffle\",\n  Reese = 'Reese',\n  Rover = 'Rover',\n  Saharah = 'Saharah',\n  SeedBag = 'Seed bag',\n  ShakingAHardwoodOrCedarTree = 'Shaking a hardwood or cedar tree',\n  Snowboy = 'Snowboy',\n  StartingItems = 'Starting items',\n  The5StarTownStatus = '5-star town status',\n  TomNook = 'Tom Nook',\n  UseAFountainFirework = 'Use a fountain firework',\n  Villagers = 'Villagers',\n  Wilbur = 'Wilbur',\n  WishingOnShootingStars = 'Wishing on shooting stars',\n  WrappingAPresent = 'Wrapping a present',\n}\n\nexport enum Theme {\n  Bathroom = 'bathroom',\n  ChildSRoom = \"child's room\",\n  Concert = 'concert',\n  Den = 'den',\n  Expensive = 'expensive',\n  Facility = 'facility',\n  Fancy = 'fancy',\n  Fitness = 'fitness',\n  FolkArt = 'folk art',\n  FreezingCold = 'freezing cold',\n  Garage = 'garage',\n  Garden = 'garden',\n  Horror = 'horror',\n  Kitchen = 'kitchen',\n  LivingRoom = 'living room',\n  Music = 'music',\n  None = 'none',\n  Ocean = 'ocean',\n  Office = 'office',\n  Outdoors = 'outdoors',\n  Party = 'party',\n  School = 'school',\n  Shop = 'shop',\n  Space = 'space',\n  ZenStyle = 'zen-style',\n}\n\nexport enum VariantID {\n  The0_0 = '0_0',\n  The0_1 = '0_1',\n  The0_2 = '0_2',\n  The0_3 = '0_3',\n  The0_4 = '0_4',\n  The0_5 = '0_5',\n  The0_6 = '0_6',\n  The0_7 = '0_7',\n  The1_0 = '1_0',\n  The1_1 = '1_1',\n  The1_2 = '1_2',\n  The1_3 = '1_3',\n  The1_4 = '1_4',\n  The1_5 = '1_5',\n  The1_6 = '1_6',\n  The1_7 = '1_7',\n  The2_0 = '2_0',\n  The2_1 = '2_1',\n  The2_2 = '2_2',\n  The2_3 = '2_3',\n  The2_4 = '2_4',\n  The2_5 = '2_5',\n  The2_6 = '2_6',\n  The2_7 = '2_7',\n  The3_0 = '3_0',\n  The3_1 = '3_1',\n  The3_2 = '3_2',\n  The3_3 = '3_3',\n  The3_4 = '3_4',\n  The3_5 = '3_5',\n  The3_6 = '3_6',\n  The3_7 = '3_7',\n  The4_0 = '4_0',\n  The4_1 = '4_1',\n  The4_2 = '4_2',\n  The4_3 = '4_3',\n  The4_4 = '4_4',\n  The4_5 = '4_5',\n  The4_6 = '4_6',\n  The4_7 = '4_7',\n  The5_0 = '5_0',\n  The5_1 = '5_1',\n  The5_2 = '5_2',\n  The5_3 = '5_3',\n  The5_4 = '5_4',\n  The5_5 = '5_5',\n  The5_6 = '5_6',\n  The5_7 = '5_7',\n  The6_0 = '6_0',\n  The6_1 = '6_1',\n  The6_2 = '6_2',\n  The6_3 = '6_3',\n  The6_4 = '6_4',\n  The6_5 = '6_5',\n  The6_6 = '6_6',\n  The6_7 = '6_7',\n  The7_0 = '7_0',\n  The7_1 = '7_1',\n  The7_2 = '7_2',\n  The7_3 = '7_3',\n  The7_4 = '7_4',\n  The7_5 = '7_5',\n  The7_6 = '7_6',\n  The7_7 = '7_7',\n}\n\nexport enum VersionAdded {\n  The100 = '1.0.0',\n  The110 = '1.1.0',\n  The120 = '1.2.0',\n  The130 = '1.3.0',\n  The140 = '1.4.0',\n  The150 = '1.5.0',\n  The160 = '1.6.0',\n}\n\nexport enum VfxType {\n  LightOff = 'LightOff',\n  Random = 'Random',\n  Synchro = 'Synchro',\n}\n\nexport enum WindowColor {\n  BlackMetal = 'Black Metal',\n  DarkWood = 'Dark Wood',\n  GreyMetal = 'Grey Metal',\n  GreyWood = 'Grey Wood',\n  LightWood = 'Light Wood',\n  NaturalWood = 'Natural Wood',\n  WhiteMetal = 'White Metal',\n  WhiteWood = 'White Wood',\n  Wood = 'Wood',\n}\n\nexport enum WindowType {\n  Arch = 'Arch',\n  Circle = 'Circle',\n  FourPane = 'Four Pane',\n  SinglePane = 'Single Pane',\n  SlidingPane = 'Sliding Pane',\n}\n","import { map } from 'lodash'\nimport React, { Fragment } from 'react'\nimport { AnyItem } from './utils/definitions'\nimport { isRecipe, isVariant } from './utils/items'\n\ninterface ItemShowProps {\n  variant: AnyItem\n  small?: boolean\n  onClick?: () => any\n  onDoubleClick?: () => any\n}\n\nexport function ItemShow(props: ItemShowProps) {\n  const { variant, small = false, onClick = () => { }, onDoubleClick = () => {} } = props\n  const iconHeight = small ? 90 : 240\n  const image = isRecipe(variant) ? variant.image : variant.image ?? variant.albumImage ?? variant.storageImage ?? ''\n  const alt = isRecipe(variant) ? 'recipe' : variant.variation ?? ''\n  return (\n    <div className=\"box\">\n      <article className=\"media\" onClick={onClick} onDoubleClick={onDoubleClick}>\n        <figure className=\"media-left\">\n          <p className=\"image is-64x64\">\n            <img src={image} height={iconHeight} alt={`${variant.name} ${alt}`} />\n          </p>\n        </figure>\n        <div className=\"media-content\">\n          <div className=\"content\">\n            <p className=\"is-small\">\n              <strong>{isRecipe(variant) ? `${variant.name} recipe` : variant.name}</strong><br />\n              {isRecipe(variant) && <>\n                {variant.category}<br />\n\n                {map(variant.materials, (v, k) => <Fragment key={`mat-${variant.uniqueEntryId}-${k}`}>{k}: {v}<br /></Fragment>)}\n\n              </>}\n              {isVariant(variant) && <>\n                {variant.genuine !== undefined && <>{variant.genuine ? 'Genuine' : 'Fake'}<br /></>}\n                {variant.colors.join(', ')}<br />\n                {variant.themes.join(', ')}<br />\n              </>}\n            </p>\n          </div>\n        </div>\n      </article >\n    </div >\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Items } from './items/items'\nimport untypedItems from './items/items.json'\nimport { Recipes } from './items/recipes'\nimport untypedRecipes from './items/recipes.json'\nimport Fuse from 'fuse.js'\nimport { memoize, flatMap, sortBy } from 'lodash'\nimport { InvertedVariant, AnyItem } from './utils/definitions'\nimport { Input } from 'antd'\nimport { ItemShow } from './ItemShow'\nimport {SearchOutlined} from '@ant-design/icons'\n\nconst items: Items[] = untypedItems as Items[]\nconst recipes: Recipes[] = untypedRecipes as unknown as Recipes[]\nconst processedItems: InvertedVariant[] = flatMap(items, ({ variants, ...item }) => variants.map(v => ({ ...v, item, name: item.name })))\nexport const allItems: AnyItem[] = [...processedItems, ...recipes]\n\nconst options = {\n  includeScore: true,\n  keys: [\n    {\n      name: 'name',\n      weight: 5\n    },\n    {\n      name: 'variants.variation',\n      weight: 2\n    },\n    {\n      name: 'variants.colors',\n      weight: 2\n    },\n    {\n      name: 'variants.pattern',\n      weight: 2\n    },\n    {\n      name: 'tag',\n      weight: 2\n    },\n    'curtainType',\n    'curtainColor',\n    'style1',\n    'style2',\n    'primaryShape',\n    'secondaryShape',\n    'type',\n    'category',\n    'hhaCategory'\n  ]\n}\n\nconst myIndex = Fuse.createIndex(options.keys, allItems)\nconst fuse = new Fuse(allItems, options, myIndex)\nconst searcher = memoize((value: string) => fuse.search(value, { limit: 30 }))\n\nexport interface ItemsSearchProps {\n  onSelect(item: AnyItem): void\n  onSecondarySelect(item: AnyItem): void\n}\nexport function ItemsSearch(props: ItemsSearchProps) {\n  const { onSelect, onSecondarySelect = () => {} } = props\n  const [matchedOptions, setMatchedOptions] = useState<AnyItem[]>([])\n  const [search, doSearch] = useState<string>('')\n  useEffect(() => {\n    const result = searcher(search)\n    setMatchedOptions(result.map(r => r.item))\n  }, [search])\n\n  const options: AnyItem[] = [...matchedOptions]\n\n  return (\n    <div className=\"tile is-ancestor\">\n      <div className=\"tile is-12 is-vertical\">\n        <div className=\"tile\">\n          <Input placeholder=\"input search text\" onChange={(e) => doSearch(e.target.value)} defaultValue={search} addonAfter={<SearchOutlined />}/>\n        </div>\n        {options.map(o => <div key={`result-${o.uniqueEntryId}`} className='tile'><ItemShow variant={o} onDoubleClick={() => onSecondarySelect(o)} onClick={() => onSelect(o)} /></div>)}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react'\nimport 'antd/dist/antd.css'\nimport 'bulma/css/bulma.css'\nimport './App.css'\nimport { map } from 'lodash'\nimport leafLogo from './assets/leaf-logo.png'\nimport { formatCheat } from './utils/formatCheat'\nimport { ItemShow } from './ItemShow'\nimport { range } from 'lodash'\nimport { Category } from './items/items'\nimport { allItems, ItemsSearch } from './ItemsSearch'\nimport { AnyItem } from './utils/definitions'\nimport { Button, message } from 'antd'\n\ninterface EmptyItemProps {\n  slot: number\n  onClick?: () => any\n}\n\nfunction EmptyItem(props: EmptyItemProps) {\n  const { onClick = () => { } } = props\n\n  const variant: AnyItem = {\n    name: `Empty Slot #${props.slot + 1}`,\n    item: {\n      name: `Empty Slot #${props.slot + 1}`,\n      sourceSheet: Category.Other\n    },\n    image: leafLogo,\n    filename: '',\n    uniqueEntryId: '',\n    colors: [],\n    themes: [],\n    source: [],\n    internalId: 0,\n    buy: 0,\n    sell: 0\n  }\n  return <ItemShow small={true} onClick={onClick} variant={variant} />\n}\n\nconst cellIndex = (row: number, column: number) => row * 4 + column\n\ninterface InventoryGridProps {\n  selectedItems: Record<number, AnyItem>\n  fillCell: (row: number, col: number) => void\n}\n\nfunction InventoryGrid(props: InventoryGridProps) {\n  const { selectedItems, fillCell } = props\n  return (\n    <>\n      {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((rowIndex) => (\n        <div className=\"tile is-ancestor\" key={`row-${rowIndex}`}>\n          {[0, 1, 2, 3].map((columnIndex) => (\n            <div className=\"tile is-parent\" key={`row-${rowIndex}-column-${columnIndex}`}>\n              <div className=\"tile is-child\">\n                {selectedItems[cellIndex(rowIndex, columnIndex)] === undefined ? (\n                  <EmptyItem onClick={() => fillCell(rowIndex, columnIndex)} slot={cellIndex(rowIndex, columnIndex)} />\n                ) : (\n                    <ItemShow onClick={() => fillCell(rowIndex, columnIndex)} small={true} variant={selectedItems[cellIndex(rowIndex, columnIndex)]} />\n                  )}\n              </div>\n            </div>\n          ))}\n        </div>\n      ))}\n    </>\n  )\n}\n\nfunction Main() {\n  const [selectedItem, selectItem] = useState<AnyItem>(allItems[0])\n  const [selectedItems, selectItemInCell] = useState<Record<number, AnyItem>>({})\n\n  const nextEmptyIndex = range(40).find((i) => selectedItems[i] === undefined) ?? 0\n  const fillIndex = (index: number, item = selectedItem) => selectItemInCell({ ...selectedItems, [index]: item })\n  const fillCell = (row: number, column: number, item = selectedItem) => fillIndex(cellIndex(row, column), item)\n  const fillEmpty = (item = selectedItem) => {\n    message.success(`Added ${item.name} to the list.`)\n    fillIndex(nextEmptyIndex, item)\n  }\n  const selectNext = () => {\n    const currentIndex = allItems.indexOf(selectedItem)\n    const nextIndex = currentIndex + 1\n    if (nextIndex < allItems.length) {\n      selectItem(allItems[nextIndex])\n    }\n  }\n  return (\n    <>\n      <section className=\"hero is-small is-dark\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <img src={leafLogo} className=\"logo\" alt=\"Animal Crossing New Horizons Inventory Generator Logo\" />\n            <h1 className=\"title\">\n              AC:NH Inventory Generator\n      </h1>\n            <h2 className=\"subtitle\">\n              V1.6.0\n      </h2>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"section\">\n        <div className=\"columns\">\n          <aside className=\"menu column is-one-quarter\">\n            <div className='container is-fluid'>\n              <div className=\"columns\">\n                <div className=\"column\">\n                  <Button onClick={() => selectNext()}>\n                    Select Next\n            </Button>\n                </div>\n                <div className=\"column\">\n                  <Button disabled={Object.values(selectedItems).length >= 40} onClick={() => fillEmpty()}>\n                    Fill Next Empty\n            </Button>\n                </div>\n              </div>\n              <ItemShow variant={selectedItem} />\n              <ItemsSearch onSecondarySelect={fillEmpty} onSelect={(item) => { selectItem(item) }} />\n            </div>\n          </aside>\n          <div className=\"column is-three-quarters\">\n            <InventoryGrid selectedItems={selectedItems} fillCell={fillCell} />\n          </div>\n\n        </div>\n      </section>\n\n      <section className=\"section\">\n        <pre>\n          {`[CHEAT CODE]\\n`}\n          {map(selectedItems, (k, v) => formatCheat(k, v))}\n        </pre>\n      </section>\n\n\n      <footer className=\"footer\">\n        <div className=\"content has-text-centered\"><p>No rights reserved. Do whatever the f*** do you want. Ale Ornelas 2020    </p>\n        </div>\n      </footer>\n\n    </>\n  )\n}\n\nexport default Main\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}