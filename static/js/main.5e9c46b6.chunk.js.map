{"version":3,"sources":["assets/leaf-logo.png","utils/itemCodes.ts","utils/numeric.ts","utils/items.ts","utils/formatCheat.ts","ItemShow.tsx","ItemsSearch.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["parseVariation","variation","includes","padStart","split","v1","v2","parsedV2","parseInt","realId","item","internalId","decimalToHex","d","padding","hex","Number","toString","length","toUpperCase","isRecipe","input","has","getInventoryAddres","player","slot","inventoryOffsets","generateTemplate","index","inventoryPosition","recipeCheat","itemCheat","variantId","ItemShow","props","variant","small","onClick","onDoubleClick","iconHeight","image","albumImage","storageImage","alt","className","src","height","name","category","map","materials","v","k","key","uniqueEntryId","undefined","genuine","colors","join","themes","items","untypedItems","recipes","untypedRecipes","recipe","allItems","find","i","craftedItemInternalId","processedItems","flatMap","variants","options","includeScore","keys","weight","myIndex","Fuse","createIndex","fuse","searcher","memoize","value","search","limit","ItemsSearch","onSelect","onSecondarySelect","useState","matchedOptions","setMatchedOptions","doSearch","useEffect","result","r","placeholder","onChange","e","target","defaultValue","addonAfter","SearchOutlined","o","EmptyItem","leafLogo","filename","source","buy","sell","cellIndex","row","column","InventoryGrid","selectedItems","fillCell","rowIndex","columnIndex","Main","selectedItem","selectItem","selectItemInCell","nextEmptyIndex","range","fillIndex","fillEmpty","message","success","nextIndex","indexOf","selectNext","disabled","Object","values","indexAsString","template","thirdField","fourthField","formatCheat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5e9c46b6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/leaf-logo.a8cf6480.png\";","import { Variant } from '../items/items'\nimport { Recipes } from '../items/recipes'\nexport function parseVariation(variation: string = 'NA') {\n  if (variation === 'NA' || !variation.includes('_')) {\n    return ''.padStart(8, '0')\n  }\n  if (variation.includes('_')) {\n    const [v1, v2] = variation.split('_')\n    const parsedV2 = parseInt(v2, 10)\n    return `${parsedV2 * 2}${v1}`.padStart(8, '0')\n  }\n  return \"XXXXXXXX\"\n}\n\n\nexport const realId = (item: Variant | Recipes) => item.internalId\n","export function decimalToHex(d: number, padding: number = 8) {\n  var hex = Number(d).toString(16);\n\n  while (hex.length < padding) {\n    hex = \"0\" + hex;\n  }\n\n  return hex.toUpperCase();\n}","import { has } from \"lodash\";\nimport { InvertedVariant, ExtendedRecipe } from \"./definitions\";\nimport { Recipes } from \"../items/recipes\";\nimport {Item} from '../items/all'\nimport allItems from '../items/all.json'\n\nexport function isRecipe(input: any): input is Recipes {\n  return has(input, 'craftedItemInternalId')\n}\n\nexport function isVariant(input: any): input is InvertedVariant {\n  return has(input, 'uniqueEntryId') && !has(input, 'craftedItemInternalId')\n}\n\nexport function inflateRecipes(recipe: Recipes): ExtendedRecipe {\n  return {\n    ...recipe,\n    // @ts-expect-error\n    item: (allItems as Item[]).find(i => i.internalId === recipe.craftedItemInternalId)\n  }\n}","import { parseVariation, realId } from './itemCodes';\nimport { decimalToHex } from './numeric';\nimport ot from '../data/output_template.json'\nimport { isRecipe } from './items';\nimport { Variant } from '../items/items';\nimport { Recipes } from '../items/recipes';\n\nconst PLAYER_1_1_ADDRESS = 0xACDAD530\nconst PLAYER_1_2_ADDRESS = 0xACDAD5E8\nconst PLAYER_OFFSET = 0x133B78\nconst SLOT_OFFSET = 0x8\n\nexport function getInventoryAddres(player: number, slot: number) {\n  const basePlayerAddress = slot >= 20 ? PLAYER_1_2_ADDRESS : PLAYER_1_1_ADDRESS\n  const actualSlotCount = slot >= 20 ? slot - 20 : slot\n  const playerAddress = basePlayerAddress + (player * PLAYER_OFFSET)\n  return decimalToHex((playerAddress + (actualSlotCount * SLOT_OFFSET)))\n}\n\ntype Player = keyof typeof ot\n\nconst inventoryOffsets: Record<Player, number> = {\n  \"Player 1\": 0,\n  \"Player 2\": 1,\n  \"Player 3\": 2,\n  \"Player 4\": 3,\n  \"Player 5\": 4,\n  \"Player 6\": 5,\n  \"Player 7\": 6,\n  \"Player 8\": 7\n}\n\nfunction generateTemplate(index: number, player: Player = \"Player 1\"): [string, string, string, string] {\n  const inventoryPosition = getInventoryAddres(inventoryOffsets[player], index)\n  return [\"08100000\", inventoryPosition, \"00000000\", \"0000FFFE\"]\n}\n\n\nfunction recipeCheat(item: Recipes): string[] {\n  return [decimalToHex(realId(item)), '000016A2']\n}\n\nfunction itemCheat(item: Variant): string[] {\n  return [item.variantId != null ? parseVariation(item.variantId) : '00000000', decimalToHex(realId(item))]\n}\n\nexport function formatCheat(item: Variant | Recipes, indexAsString: string, player: Player = \"Player 1\") {\n  const index = parseInt(indexAsString, 10);\n  const template = generateTemplate(index, player)\n  const [thirdField, fourthField] = isRecipe(item) ? recipeCheat(item) : itemCheat(item)\n  return `${template[0]} ${template[1]} ${thirdField} ${fourthField}\\n`;\n}\n","import { map } from 'lodash'\nimport React, { Fragment } from 'react'\nimport { AnyItem } from './utils/definitions'\nimport { isRecipe, isVariant } from './utils/items'\n\ninterface ItemShowProps {\n  variant: AnyItem\n  small?: boolean\n  onClick?: () => any\n  onDoubleClick?: () => any\n}\n\nexport function ItemShow(props: ItemShowProps) {\n  const { variant, small = false, onClick = () => { }, onDoubleClick = () => {} } = props\n  const iconHeight = small ? 90 : 240\n  const image = isRecipe(variant) ? variant.image : variant.image ?? variant.albumImage ?? variant.storageImage ?? ''\n  const alt = isRecipe(variant) ? 'recipe' : variant.variation ?? ''\n  return (\n    <div className=\"box\">\n      <article className=\"media\" onClick={onClick} onDoubleClick={onDoubleClick}>\n        <figure className=\"media-left\">\n          <p className=\"image is-64x64\">\n            <img src={image} height={iconHeight} alt={`${variant.name} ${alt}`} />\n          </p>\n        </figure>\n        <div className=\"media-content\">\n          <div className=\"content\">\n            <p className=\"is-small\">\n              <strong>{isRecipe(variant) ? `${variant.name} recipe` : variant.name}</strong><br />\n              {isRecipe(variant) && <>\n                {variant.category}<br />\n\n                {map(variant.materials, (v, k) => <Fragment key={`mat-${variant.uniqueEntryId}-${k}`}>{k}: {v}<br /></Fragment>)}\n\n              </>}\n              {isVariant(variant) && <>\n                {variant.genuine !== undefined && <>{variant.genuine ? 'Genuine' : 'Fake'}<br /></>}\n                {variant.colors.join(', ')}<br />\n                {variant.themes.join(', ')}<br />\n              </>}\n            </p>\n          </div>\n        </div>\n      </article >\n    </div >\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Items } from './items/items'\nimport untypedItems from './items/items.json'\nimport untypedRecipes from './items/recipes.json'\nimport Fuse from 'fuse.js'\nimport { memoize, flatMap } from 'lodash'\nimport { InvertedVariant, AnyItem } from './utils/definitions'\nimport { Input } from 'antd'\nimport { ItemShow } from './ItemShow'\nimport {SearchOutlined} from '@ant-design/icons'\nimport { inflateRecipes } from './utils/items'\nimport { Recipes } from './items/recipes'\n\nconst items: Items[] = untypedItems as Items[]\nconst recipes = (untypedRecipes as unknown as Recipes[]).map(inflateRecipes)\nconst processedItems: InvertedVariant[] = flatMap(items, ({ variants, ...item }) => variants.map(v => ({ ...v, item, name: item.name })))\nexport const allItems: AnyItem[] = [...processedItems, ...recipes]\n\nconst options = {\n  includeScore: true,\n  keys: [\n    {\n      name: 'name',\n      weight: 5\n    },\n    {\n      name: 'variants.variation',\n      weight: 2\n    },\n    {\n      name: 'variants.colors',\n      weight: 2\n    },\n    {\n      name: 'variants.pattern',\n      weight: 2\n    },\n    {\n      name: 'tag',\n      weight: 2\n    },\n    'curtainType',\n    'curtainColor',\n    'style1',\n    'style2',\n    'primaryShape',\n    'secondaryShape',\n    'type',\n    'category',\n    'hhaCategory'\n  ]\n}\n\nconst myIndex = Fuse.createIndex(options.keys, allItems)\nconst fuse = new Fuse(allItems, options, myIndex)\nconst searcher = memoize((value: string) => fuse.search(value, { limit: 30 }))\n\nexport interface ItemsSearchProps {\n  onSelect(item: AnyItem): void\n  onSecondarySelect(item: AnyItem): void\n}\nexport function ItemsSearch(props: ItemsSearchProps) {\n  const { onSelect, onSecondarySelect = () => {} } = props\n  const [matchedOptions, setMatchedOptions] = useState<AnyItem[]>([])\n  const [search, doSearch] = useState<string>('')\n  useEffect(() => {\n    const result = searcher(search)\n    setMatchedOptions(result.map(r => r.item))\n  }, [search])\n\n  const options: AnyItem[] = [...matchedOptions]\n\n  return (\n    <div className=\"tile is-ancestor\">\n      <div className=\"tile is-12 is-vertical\">\n        <div className=\"tile\">\n          <Input placeholder=\"input search text\" onChange={(e) => doSearch(e.target.value)} defaultValue={search} addonAfter={<SearchOutlined />}/>\n        </div>\n        {options.map(o => <div key={`result-${o.uniqueEntryId}`} className='tile'><ItemShow variant={o} onDoubleClick={() => onSecondarySelect(o)} onClick={() => onSelect(o)} /></div>)}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react'\nimport 'antd/dist/antd.css'\nimport 'bulma/css/bulma.css'\nimport './App.css'\nimport { map } from 'lodash'\nimport leafLogo from './assets/leaf-logo.png'\nimport { formatCheat } from './utils/formatCheat'\nimport { ItemShow } from './ItemShow'\nimport { range } from 'lodash'\nimport { allItems, ItemsSearch } from './ItemsSearch'\nimport { AnyItem } from './utils/definitions'\nimport { Button, message } from 'antd'\n\ninterface EmptyItemProps {\n  slot: number\n  onClick?: () => any\n}\n\nfunction EmptyItem(props: EmptyItemProps) {\n  const { onClick = () => { } } = props\n\n  const variant: AnyItem = {\n    name: `Empty Slot #${props.slot + 1}`,\n    item: {\n      name: `Empty Slot #${props.slot + 1}`\n    },\n    image: leafLogo,\n    filename: '',\n    uniqueEntryId: '',\n    colors: [],\n    themes: [],\n    source: [],\n    internalId: 0,\n    buy: 0,\n    sell: 0\n  }\n  return <ItemShow small={true} onClick={onClick} variant={variant} />\n}\n\nconst cellIndex = (row: number, column: number) => row * 4 + column\n\ninterface InventoryGridProps {\n  selectedItems: Record<number, AnyItem>\n  fillCell: (row: number, col: number) => void\n}\n\nfunction InventoryGrid(props: InventoryGridProps) {\n  const { selectedItems, fillCell } = props\n  return (\n    <>\n      {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map((rowIndex) => (\n        <div className=\"tile is-ancestor\" key={`row-${rowIndex}`}>\n          {[0, 1, 2, 3].map((columnIndex) => (\n            <div className=\"tile is-parent\" key={`row-${rowIndex}-column-${columnIndex}`}>\n              <div className=\"tile is-child\">\n                {selectedItems[cellIndex(rowIndex, columnIndex)] === undefined ? (\n                  <EmptyItem onClick={() => fillCell(rowIndex, columnIndex)} slot={cellIndex(rowIndex, columnIndex)} />\n                ) : (\n                    <ItemShow onClick={() => fillCell(rowIndex, columnIndex)} small={true} variant={selectedItems[cellIndex(rowIndex, columnIndex)]} />\n                  )}\n              </div>\n            </div>\n          ))}\n        </div>\n      ))}\n    </>\n  )\n}\n\nfunction Main() {\n  const [selectedItem, selectItem] = useState<AnyItem>(allItems[0])\n  const [selectedItems, selectItemInCell] = useState<Record<number, AnyItem>>({})\n\n  const nextEmptyIndex = range(40).find((i) => selectedItems[i] === undefined) ?? 0\n  const fillIndex = (index: number, item = selectedItem) => selectItemInCell({ ...selectedItems, [index]: item })\n  const fillCell = (row: number, column: number, item = selectedItem) => fillIndex(cellIndex(row, column), item)\n  const fillEmpty = (item = selectedItem) => {\n    message.success(`Added ${item.name} to the list.`)\n    fillIndex(nextEmptyIndex, item)\n  }\n  const selectNext = () => {\n    const currentIndex = allItems.indexOf(selectedItem)\n    const nextIndex = currentIndex + 1\n    if (nextIndex < allItems.length) {\n      selectItem(allItems[nextIndex])\n    }\n  }\n  return (\n    <>\n      <section className=\"hero is-small is-dark\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <img src={leafLogo} className=\"logo\" alt=\"Animal Crossing New Horizons Inventory Generator Logo\" />\n            <h1 className=\"title\">\n              AC:NH Inventory Generator\n      </h1>\n            <h2 className=\"subtitle\">\n              V1.7.0\n      </h2>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"section\">\n        <div className=\"columns\">\n          <aside className=\"menu column is-one-quarter\">\n            <div className='container is-fluid'>\n              <div className=\"columns\">\n                <div className=\"column\">\n                  <Button onClick={() => selectNext()}>\n                    Select Next\n            </Button>\n                </div>\n                <div className=\"column\">\n                  <Button disabled={Object.values(selectedItems).length >= 40} onClick={() => fillEmpty()}>\n                    Fill Next Empty\n            </Button>\n                </div>\n              </div>\n              <ItemShow variant={selectedItem} />\n              <ItemsSearch onSecondarySelect={fillEmpty} onSelect={(item) => { selectItem(item) }} />\n            </div>\n          </aside>\n          <div className=\"column is-three-quarters\">\n            <InventoryGrid selectedItems={selectedItems} fillCell={fillCell} />\n          </div>\n\n        </div>\n      </section>\n\n      <section className=\"section\">\n        <pre>\n          {`[CHEAT CODE]\\n`}\n          {map(selectedItems, (k, v) => formatCheat(k, v))}\n        </pre>\n      </section>\n\n\n      <footer className=\"footer\">\n        <div className=\"content has-text-centered\"><p>No rights reserved. Do whatever the f*** do you want. Ale Ornelas 2020    </p>\n        </div>\n      </footer>\n\n    </>\n  )\n}\n\nexport default Main\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}